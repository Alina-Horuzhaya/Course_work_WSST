#include "stdafx.h"  
#include <iostream>
#include <string>
#include <cmath>  
#include <stdlib.h>
#include <time.h>

using namespace std;
//входные данные:
// NTL - нормированная пропускная нагрузка
// T - временной интервал
// NOP - количество пакетов
// n - постоянное количество процессоров в системе = 4
void synchronous_Alloha(double NTL, int T, int NOP, int cores);

int main()
{
    setlocale(LC_ALL, "RUS");
    srand(time(0));

	cout << "Тест метода Синхронная Аллоха" << endl;
	cout << endl;
	//Ввод показателей для расчета 4 варианта

	double NTL_1 = 0.01;	//нормированная пропускная нагрузка
	double NTL_2 = 0.5;
	double NTL_3 = 2.0;

	int T_1 = 1;	//временной интервал
	int T_2 = 4;
	int T_3 = 8;

	int NOP_1 = 100;	 // количество пакетов
	int NOP_2 = 1000;
	int NOP_3 = 10000;

	int cores = 4;		// количество процессоров в системе

	// вывод показателей для 100 пакетов 1ый интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << " Для 100 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_1, NOP_1, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_1, NOP_1, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_1, NOP_1, cores);
	cout << endl;

	// вывод показателей для 100 пакетов 2ый интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << " Для 100 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_2, NOP_1, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_2, NOP_1, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_2, NOP_1, cores);
	cout << endl;

	// вывод показателей для 100 пакетов 3ий интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << " Для 100 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_3, NOP_1, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_3, NOP_1, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_3, NOP_1, cores);
	cout << endl;

	// вывод показателей для 1 000 пакетов 1ый интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << "Для 1 000 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_1, NOP_2, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_1, NOP_2, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_1, NOP_2, cores);
	cout << endl;

	// вывод показателей для 1 000 пакетов 2ой интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << "Для 1 000 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_2, NOP_2, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_2, NOP_2, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_2, NOP_2, cores);
	cout << endl;

	// вывод показателей для 1 000 пакетов 3ий интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << "Для 1 000 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_3, NOP_2, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_3, NOP_2, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_3, NOP_2, cores);
	cout << endl;

	// вывод показателей для 10 000 пакетов 1ый интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << "Для 10 000 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_1, NOP_3, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_1, NOP_3, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_1 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_1, NOP_3, cores);
	cout << endl;

	// вывод показателей для 10 000 пакетов 2ой интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << "Для 10 000 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_2, NOP_3, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_2, NOP_3, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_2 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_2, NOP_3, cores);
	cout << endl;

	// вывод показателей для 10 000 пакетов 3ий интервал
	cout << "--------------------------------------------------------------------------------------------------------" << endl;
	cout << "Для 10 000 пакетов:" << endl;
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_1 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_1, T_3, NOP_3, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_2 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_2, T_3, NOP_3, cores);
	cout << endl;
	cout << "Для нормированной пропускной нагрузки = " << NTL_3 << " и " << "временного интервала = " << T_3 << '\n';
	cout << '|';
	synchronous_Alloha(NTL_3, T_3, NOP_3, cores);
	cout << endl;

	system("pause");
	return(0);
}

void synchronous_Alloha(double NTL, int T, int NOP, int cores) {
	{
		double P = exp(-NTL);	// вероятность прохождения кадра
		double prob = int(P * 100);
		int RP;	// опытная вероятность прохождения кадра
		int counterPacketSuccess = 0;	//счестчик прошедших (успешных) пакетов
		int counterPacketDenied = 0;	// счетчик не прошедших пакетов

		for (int i = 0; i < NOP; i++) //NOP - кол-во пакетов
		{
			RP = rand() % 101;
			if (RP <= prob)
			{
				counterPacketSuccess++; //счетчик принятых пакетов
			}
			else
			{
				counterPacketDenied++;  //счетчик отклоненных пакетов
				while (RP > prob)
					RP = rand() % 101;
				i--;
			};
		};

		// опытное значение нормированной пропускной нагрузки
		double RG = (float)((counterPacketSuccess + counterPacketDenied) * cores * ((float)1 / T)) / NOP;
		double S = RG * exp(-RG);	//нормированная производительность
		int totalTime = (counterPacketSuccess + counterPacketDenied) * T;
		double timeOnePacket = totalTime * 1.0 / NOP;

		cout << endl;
		cout << "Результаты тестирования:" << endl;
		cout << "Общее время передачи кадров: " << totalTime << endl;
		cout << "Среднее время передачи одного кадра: " << timeOnePacket << endl;
		cout << "Нормированная производительность протокола передачи=" << S << endl;
		cout << "Количество не прошедших пакетов: " << counterPacketDenied << endl;

	};
}